<% if (isSpeaker) { %>
<script>
    const IS_SPEAKER = true;
</script>
<%} else { %>
<script>
    const IS_SPEAKER = false;
</script>
<% } %>

<script>
    const MY_CONNECTION_TIMESTAMP = parseInt('<%- JSON.stringify(connectionTimestamp) %>');

    let connectDisconnectButton = document.querySelector('.connectDisconnectButton');
    connectDisconnectButton.addEventListener("click", connectToHiFi);
    connectDisconnectButton.disabled = false;
    let toggleInputMuteButton = document.querySelector('.toggleInputMuteButton');
    let outputAudioEl = document.querySelector(`.outputAudioEl`);
    outputAudioEl.addEventListener('canplay', (e) => { setOutputMute(false); } );
    let toggleOutputMuteButton = document.querySelector('.toggleOutputMuteButton');
    toggleOutputMuteButton.addEventListener("click", toggleOutputMute);
    let participantsFAB = document.querySelector('.participantsFAB');
    participantsFAB.addEventListener('click', toggleParticipantsContainerVisibility);
    const participantsContainer = document.querySelector('.participantsContainer');
    participantsContainer.addEventListener('click', (e) => { e.stopPropagation(); });
    const hiFiGainSlider = document.querySelector('.hiFiGainSlider');
    hiFiGainSlider.disabled = true;
    hiFiGainSlider.addEventListener('input', onHiFiGainChanged);
    document.addEventListener('click', closeParticipantsContainer);

    function updateMyPositionAndOrientation(targetPosition, targetOrientation) {
        if (!hifiCommunicator) {
            return;
        }

        let myUserData = allUserData.find((element) => { return element.providedUserID === myProvidedUserID; });
        if (!myUserData) {
            console.error(`Couldn't find \`myUserData\` inside \`allUserData\`!`);
            return;
        }

        if (!myUserData.position) {
            myUserData.position = {};
        }

        if (!myUserData.orientationEuler) {
            myUserData.orientationEuler = {};
        }

        if (targetPosition) {
            Object.assign(myUserData.position, targetPosition);
        }

        if (targetOrientation) {
            Object.assign(myUserData.orientationEuler, targetOrientation);
        }

        console.log(hifiCommunicator.updateUserDataAndTransmit({
            position: myUserData.position,
            orientationEuler: myUserData.orientationEuler,
        }));

        window.requestAnimationFrame(updateCanvas);
    }

    function positionSelfInCrowd() {
        console.log(`${allUserData.length} user(s) present, including ourselves.\n${speakerCount} speaker(s).\n${audienceCount} audience member(s).`);

        let foundOpenSpot = false;
        let currentCircleDivisions = 1;
        let positionsChecked = [];
        let circleRadius = IS_SPEAKER ? SPEAKER_RADIUS_M : AUDIENCE_RADIUS_M;
        if (circleRadius === 0) {
            let currentPotentialPosition = {
                "x": 0,
                "y": 0
            };
            let computedOrientation = new HighFidelityAudio.OrientationEuler3D({ "pitchDegrees": 0, "yawDegrees": 0, "rollDegrees": 0 });
            updateMyPositionAndOrientation(currentPotentialPosition, computedOrientation);
            console.log(`Found an open spot at ${JSON.stringify(currentPotentialPosition)} with orientation ${JSON.stringify(computedOrientation)}.`);
        } else {
            while (!foundOpenSpot) {
                for (let theta = 0; theta < 2 * Math.PI; theta += ((2 * Math.PI) / currentCircleDivisions)) {
                    let currentPotentialPosition = {
                        "x": (circleRadius) * Math.cos(theta),
                        "y": (circleRadius) * Math.sin(theta)
                    };

                    currentPotentialPosition.x = Math.round((currentPotentialPosition.x + Number.EPSILON) * 100) / 100;
                    currentPotentialPosition.y = Math.round((currentPotentialPosition.y + Number.EPSILON) * 100) / 100;

                    if (positionsChecked.find((position) => { return currentPotentialPosition.x === position.x && currentPotentialPosition.y === position.y; })) {
                        continue;
                    }
                    
                    let occupied = allUserData.find((element) => { return element.position && Math.abs(element.position.x - currentPotentialPosition.x) < CLOSE_ENOUGH_M && Math.abs(element.position.y - currentPotentialPosition.y) < CLOSE_ENOUGH_M; });

                    if (!occupied) {
                        let orientationYawRadians = Math.atan2(-currentPotentialPosition.x, -currentPotentialPosition.y);
                        let orientationYawDegrees = orientationYawRadians * 180 / Math.PI;
                        if (orientationYawDegrees < 0) {
                            orientationYawDegrees += 360;
                        }
                        let computedOrientation = new HighFidelityAudio.OrientationEuler3D({ "pitchDegrees": 0, "yawDegrees": Math.round((orientationYawDegrees + Number.EPSILON) * 100) / 100, "rollDegrees": 0 });
                        updateMyPositionAndOrientation(currentPotentialPosition, computedOrientation);
                        console.log(`Found an open spot at ${JSON.stringify(currentPotentialPosition)} with orientation ${JSON.stringify(computedOrientation)}.`);
                        foundOpenSpot = true;
                        break;
                    } else {
                        positionsChecked.push(currentPotentialPosition);
                    }
                }

                currentCircleDivisions *= 2;
            }
        }
    }

    const numParticipants = document.querySelector('.numParticipants');
    function incrementSpeakerCount() {
        speakerCount++;
        numParticipants.innerHTML = audienceCount + speakerCount;
        updateParticipantsContainerInnerHTML();
    }

    function incrementAudienceCount() {
        audienceCount++;
        numParticipants.innerHTML = audienceCount + speakerCount;
        updateParticipantsContainerInnerHTML();
    }

    function resetParticipantsCount() {
        audienceCount = 0;
        speakerCount = 0;
        numParticipants.innerHTML = audienceCount + speakerCount;
        updateParticipantsContainerInnerHTML();
    }

    function updateParticipantsContainerInnerHTML() {
        participantsContainer.innerHTML = ``;

        let speakersContainer = document.createElement('div');
        speakersContainer.innerHTML = `<h3 class="speakersHeader">Speakers (${speakerCount})</h3>`;

        let audienceContainer = document.createElement('div');
        audienceContainer.innerHTML = `<h3 class="audienceHeader">Audience (${audienceCount})</h3>`;

        for (const userData of allUserData) {
            let participant = document.createElement('p');
            participant.style.color = userData.hexColor;
            if (userData.isSpeaker) {
                participant.innerHTML = userData.providedUserID.replace('speaker-', '');
                speakersContainer.appendChild(participant);
            } else {
                participant.innerHTML = userData.providedUserID.replace('audience-', '');
                audienceContainer.appendChild(participant);
            }
        }

        participantsContainer.appendChild(speakersContainer);
        participantsContainer.appendChild(audienceContainer);
    }

    async function onNewHiFiUserDataReceived(receivedHiFiAudioAPIDataArray) {
        let mustUpdateCanvas = false;
        let gotNewHiFiUser = false;

        for (let i = 0; i < receivedHiFiAudioAPIDataArray.length; i++) {
            let currentDataFromServer = receivedHiFiAudioAPIDataArray[i];
            let currentProvidedUserID = currentDataFromServer.providedUserID;
            let currentLocalUserData = allUserData.find((element) => { return element.providedUserID === currentProvidedUserID; })
            let isMine = currentProvidedUserID === myProvidedUserID;

            if (currentLocalUserData) {
                if (currentDataFromServer.position) {
                    if (!currentLocalUserData.position) {
                        currentLocalUserData.position = new HighFidelityAudio.Point3D();
                    }

                    if (typeof (currentDataFromServer.position.x) === "number") {
                        currentLocalUserData.position.x = currentDataFromServer.position.x;
                        mustUpdateCanvas = true;
                    }
                    if (typeof (currentDataFromServer.position.y) === "number") {
                        currentLocalUserData.position.y = currentDataFromServer.position.y;
                        mustUpdateCanvas = true;
                    }
                    if (typeof (currentDataFromServer.position.z) === "number") {
                        currentLocalUserData.position.z = currentDataFromServer.position.z;
                        mustUpdateCanvas = true;
                    }
                }

                if (currentDataFromServer.orientationEuler) {
                    if (!currentLocalUserData.orientationEuler) {
                        currentLocalUserData.orientationEuler = new HighFidelityAudio.OrientationEuler3D();
                    }

                    if (typeof (currentDataFromServer.orientationEuler.pitchDegrees) === "number") {
                        currentLocalUserData.orientationEuler.pitchDegrees = currentDataFromServer.orientationEuler.pitchDegrees;

                        mustUpdateCanvas = true;
                    }
                    if (typeof (currentDataFromServer.orientationEuler.yawDegrees) === "number") {
                        if (isMine && currentLocalUserData.orientationEuler.yawDegrees !== currentDataFromServer.orientationEuler.yawDegrees) {
                            // TODO: What is going on here!?
                            // https://highfidelity.atlassian.net/browse/HIFI-316
                            console.warn(`We sent our \`yawDegrees\` as ${currentLocalUserData.orientationEuler.yawDegrees}°, but the server is telling us our \`yawDegrees\` is ${currentDataFromServer.orientationEuler.yawDegrees}°!\nIgnoring server data...`);
                        } else {
                            currentLocalUserData.orientationEuler.yawDegrees = currentDataFromServer.orientationEuler.yawDegrees;
                        }
                        mustUpdateCanvas = true;
                    }
                    if (typeof (currentDataFromServer.orientationEuler.rollDegrees) === "number") {
                        currentLocalUserData.orientationEuler.rollDegrees = currentDataFromServer.orientationEuler.rollDegrees;
                        mustUpdateCanvas = true;
                    }
                }

                // Only update volume data for speakers, not audience members.
                if (currentLocalUserData.isSpeaker && typeof (currentDataFromServer.volumeDecibels) === "number") {
                    currentLocalUserData.volumeDecibels = currentDataFromServer.volumeDecibels;
                    mustUpdateCanvas = true;
                }
            } else {
                console.log(`New HiFi User! Provided ID: ${currentProvidedUserID}`);
                gotNewHiFiUser = true;
                let isSpeaker = currentProvidedUserID.indexOf("speaker-") === 0
                allUserData.push(new SpeakerSpaceUserData({
                    providedUserID: currentProvidedUserID,
                    position: currentDataFromServer.position,
                    orientationEuler: currentDataFromServer.orientationEuler,
                    isSpeaker: isSpeaker,
                    volumeDecibels: currentDataFromServer.volumeDecibels,
                }));
                if (isSpeaker) {
                    incrementSpeakerCount();
                } else {
                    incrementAudienceCount();
                }
                mustUpdateCanvas = true;
            }
        }

        let allAlone = false;
        if (!receivedInitialOtherUserDataFromHiFi && receivedHiFiAudioAPIDataArray.length === 1 && receivedHiFiAudioAPIDataArray[0].providedUserID === myProvidedUserID) {
            console.log("We're the only one here!");
            allAlone = true;
            receivedInitialOtherUserDataFromHiFi = true;
        }

        let myUserData = allUserData.find((element) => { return element.providedUserID === myProvidedUserID; });
        let usersSittingInMySeat = [];
        // Everyone can sit at (0, 0), so we don't want to check for collisions in that case.
        if (myUserData && myUserData.position && myUserData.position.x !== 0 && myUserData.position.y !== 0) {
                usersSittingInMySeat = allUserData.filter((userData) => {
                return myUserData &&
                myUserData.position &&
                userData.position &&
                userData.providedUserID !== myProvidedUserID &&
                Math.abs(myUserData.position.x - userData.position.x) < CLOSE_ENOUGH_M &&
                Math.abs(myUserData.position.y - userData.position.y) < CLOSE_ENOUGH_M;
            });
        }
        let mustReposition = false;
        if (usersSittingInMySeat.length > 0 || (gotNewHiFiUser && !receivedInitialOtherUserDataFromHiFi) || allAlone) {
            if (usersSittingInMySeat.length > 0) {
                console.warn(`There's another user in our seat! Checking to see if we were here first...`);
                let olderConnectionTimestamp;
                let timestampValid = false;
                for (userInMySeat of usersSittingInMySeat) {
                    let otherConnectionTimestamp;
                    if (userInMySeat.connectionTimestamp) {
                        otherConnectionTimestamp = userInMySeat.connectionTimestamp
                    } else {
                        try {
                            otherConnectionTimestamp = await fetch(`/spatial-speaker-space/get-connection-age?providedUserID=${userData.providedUserID}&spaceName=${spaceName}`);
                        } catch (e) {
                            continue;
                        }
                        try {
                            otherConnectionTimestamp = await otherConnectionTimestamp.json().connectionTimestamp;
                            userInMySeat.connectionTimestamp = otherConnectionTimestamp;
                        } catch (e) {
                            continue;
                        }
                    }
                    if (otherConnectionTimestamp && otherConnectionTimestamp < MY_CONNECTION_TIMESTAMP) {
                        olderConnectionTimestamp = otherConnectionTimestamp;
                        timestampValid = true;
                        break;
                    }
                }
                if (olderConnectionTimestamp && timestampValid) {
                    console.warn(`Someone else with an older connection was sitting in our seat!\nTheir timestamp: ${olderConnectionTimestamp}\nOur timestamp  : ${MY_CONNECTION_TIMESTAMP}\nLet's recompute our position.`);
                    mustReposition = true;
                } else if (timestampValid) {
                    console.warn(`We were here first, so we're staying put.`);
                }
            }
            if (gotNewHiFiUser && !receivedInitialOtherUserDataFromHiFi) {
                receivedInitialOtherUserDataFromHiFi = true;
                mustReposition = true;
            }

            if (allAlone || mustReposition) {
                positionSelfInCrowd();
            }
        }

        if (mustUpdateCanvas) {
            window.requestAnimationFrame(updateCanvas);
        }
    }

    class SpeakerSpaceUserData {
        constructor(data) {
            this.providedUserID = data.providedUserID;
            this.position = data.position;
            this.orientationEuler = data.orientationEuler;
            this.isSpeaker = data.isSpeaker;
            this.volumeDecibels = data.volumeDecibels;
            this.hiFiGain = data.hiFiGain || 1.0;
            this.hexColor = hexColorFromString(this.providedUserID);
        }
    }

    let hifiCommunicator;
    let spaceName = '<%- spaceName %>';
    let myProvidedUserID;
    let allUserData = [];
    let speakerCount = 0;
    let audienceCount = 0;
    let receivedInitialOtherUserDataFromHiFi = false;
    let muteButtonHookedUp = false;
    async function connectToHiFi() {
        // Disable the Connect button after the user clicks it so we don't double-connect.
        connectDisconnectButton.disabled = true;
        connectDisconnectButton.innerHTML = `Connecting...`;
        toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
        hiFiGainSlider.disabled = true;

        // Get the audio media stream associated with the user's default audio input device.
        let audioMediaStream;
        if (IS_SPEAKER) {
            try {
                audioMediaStream = await navigator.mediaDevices.getUserMedia({ audio: HighFidelityAudio.getBestAudioConstraints(), video: false });
            } catch (e) {
                return;
            }
        }

        // Set up the initial data for our user.
        // They'll be standing at the origin, facing "forward".
        let initialHiFiAudioAPIData = new HighFidelityAudio.HiFiAudioAPIData({
            position: new HighFidelityAudio.Point3D({ "x": 0, "y": 0, "z": 0 }),
            orientationEuler: new HighFidelityAudio.OrientationEuler3D({ "pitchDegrees": 0, "yawDegrees": 0, "rollDegrees": 0 })
        });

        HighFidelityAudio.HiFiLogger.setHiFiLogLevel(HighFidelityAudio.HiFiLogLevel.Debug);

        // Set up our `HiFiCommunicator` object, supplying our media stream and initial user data.
        hifiCommunicator = new HighFidelityAudio.HiFiCommunicator({
            initialHiFiAudioAPIData: initialHiFiAudioAPIData,
            transmitRateLimitTimeoutMS: 10,
        });

        // Set up a new User Data Subscription to get User Data updates from the server.
        let newUserDataSubscription = new HighFidelityAudio.UserDataSubscription({
            // Setting `providedUserID` to `null` (or omitting it) means we will get data updates from **all** connected Users, including ourselves.
            "providedUserID": null,
            // There are other components we could subscribe to here, but we're only subscribing to Volume data updates.
            "components": [
                HighFidelityAudio.AvailableUserDataSubscriptionComponents.Position,
                HighFidelityAudio.AvailableUserDataSubscriptionComponents.OrientationEuler,
                HighFidelityAudio.AvailableUserDataSubscriptionComponents.VolumeDecibels
            ],
            // See above for the definition of `onNewHiFiUserDataReceived`.
            "callback": onNewHiFiUserDataReceived
        });
        // Actually add the newly-constructed Data Subscription to the list of our Data Subscriptions on our `HiFiCommunicator`.
        hifiCommunicator.addUserDataSubscription(newUserDataSubscription);

        allUserData = [];
        receivedInitialOtherUserDataFromHiFi = false;
        speakerCount = 0;
        audienceCount = 0;
        resetParticipantsCount();

        // Connect to the HiFi Audio API server!
        try {
            let response = await hifiCommunicator.connectToHiFiAudioAPIServer('<%- hiFiJWT %>');

            myProvidedUserID = response.audionetInitResponse.user_id;
            allUserData.push(new SpeakerSpaceUserData({
                "providedUserID": myProvidedUserID,
                "isSpeaker": IS_SPEAKER
            }));
            if (IS_SPEAKER) {
                incrementSpeakerCount();
                await hifiCommunicator.setInputAudioMediaStream(audioMediaStream);
                if (!muteButtonHookedUp) {                    
                    toggleInputMuteButton.addEventListener("click", toggleInputMute);
                    muteButtonHookedUp = true;
                }
                toggleInputMuteButton.classList.remove("toggleInputMuteButton--disabled");
            } else {
                setInputMute(true);
                incrementAudienceCount();
                toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
            }
            console.log(`My Provided User ID: ${myProvidedUserID}`);
        } catch (e) {
            console.error(`Error connecting to High Fidelity:\n${JSON.stringify(e)}`);
            connectDisconnectButton.disabled = false;
            toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
            connectDisconnectButton.innerHTML = `Connection error. Retry?`;
            hiFiGainSlider.disabled = true;
            return;
        }

        // Show the user that we're connected by changing the text on the button.
        connectDisconnectButton.removeEventListener("click", connectToHiFi);
        connectDisconnectButton.addEventListener("click", disconnectFromHiFi);
        connectDisconnectButton.innerHTML = `Disconnect`;
        connectDisconnectButton.disabled = false;
        hiFiGainSlider.disabled = false;

        // Set the `srcObject` on our `audio` DOM element to the final, mixed audio stream from the High Fidelity Audio API Server.
        outputAudioEl.srcObject = hifiCommunicator.getOutputAudioMediaStream();
        setOutputMute(false);
    }

    let isMuted = false;
    async function setInputMute(newMuteStatus) {
        if (!hifiCommunicator) {
            return;
        }
        
        if (isMuted === newMuteStatus) {
            return;
        }

        if (await hifiCommunicator.setInputAudioMuted(newMuteStatus)) {
            isMuted = newMuteStatus;

            if (isMuted) {
                toggleInputMuteButton.classList.add("toggleInputMuteButton--muted");
            } else {
                toggleInputMuteButton.classList.remove("toggleInputMuteButton--muted");
            }
        }
    }

    async function toggleInputMute() {
        await setInputMute(!isMuted);
    }

    function setOutputMute(newMuteStatus) {        
        outputAudioEl.muted = !!newMuteStatus;
        console.log(`Set output mute status to \`${outputAudioEl.muted}\``);

        if (outputAudioEl.muted) {
            toggleOutputMuteButton.classList.add("toggleOutputMuteButton--muted");
        } else {
            toggleOutputMuteButton.classList.remove("toggleOutputMuteButton--muted");
            // We explicitly call `play()` here because certain browsers won't play the newly-set stream automatically.
            outputAudioEl.play();
        }
    }

    function toggleOutputMute() {
        setOutputMute(!outputAudioEl.muted);
    }

    function closeParticipantsContainer() {
        participantsContainer.classList.add("displayNone");
    }

    function toggleParticipantsContainerVisibility(e) {
        updateParticipantsContainerInnerHTML();
        participantsContainer.classList.toggle("displayNone");
        e.stopPropagation();
    }

    const currentHiFiGainValue = document.querySelector('.currentHiFiGainValue');
    function onHiFiGainChanged() {
        if (!hifiCommunicator) {
            return;
        }

        let myUserData = allUserData.find((element) => { return element.providedUserID === myProvidedUserID; });
        if (!myUserData) {
            console.error(`Couldn't find \`myUserData\` inside \`allUserData\`!`);
            return;
        }

        let sliderValue = parseInt(hiFiGainSlider.value);
        // Make the UI look nice with a default gain slider value of 1.0 instead of 1.05...
        if (sliderValue === 11) {
            myUserData.hiFiGain = 1.0;
        } else {
            myUserData.hiFiGain = logarithmicScale(sliderValue, 1, 21, 1, 110) / 10;
        }

        currentHiFiGainValue.innerHTML = `Input Gain: ${myUserData.hiFiGain.toFixed(2)}`;
        console.log(`User changed their HiFiGain to ${myUserData.hiFiGain}`);

        console.log(hifiCommunicator.updateUserDataAndTransmit({
            hiFiGain: myUserData.hiFiGain,
        }));
    }

    function disconnectFromHiFi() {
        console.log(`Disconnecting from High Fidelity Audio API Servers...`);

        connectDisconnectButton.removeEventListener("click", disconnectFromHiFi);
        connectDisconnectButton.addEventListener("click", connectToHiFi);
        connectDisconnectButton.disabled = false;
        connectDisconnectButton.innerHTML = `Connect`;
        hiFiGainSlider.disabled = true;

        toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
        isMuted = false;

        if (hifiCommunicator) {
            hifiCommunicator.disconnectFromHiFiAudioAPIServer();
        }
        hifiCommunicator = null;
        allUserData = [];
        resetParticipantsCount();
        
        window.requestAnimationFrame(updateCanvas);
    }

    window.onresize = () => {
        updateCanvasDimensions();
        window.requestAnimationFrame(updateCanvas);
    };
    window.onbeforeunload = disconnectFromHiFi;
</script>